version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgis/postgis:15-3.3
    container_name: swift-eats-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-swift_eats}
      POSTGRES_USER: ${POSTGRES_USER:-swift_eats_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-swift_eats_user} -d ${POSTGRES_DB:-swift_eats}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: swift-eats-redis-prod
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Kafka & Zookeeper (Production)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: swift-eats-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    ports:
      - "127.0.0.1:2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: swift-eats-kafka-prod
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST:-localhost}:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 50
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 1000
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 60s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Orders Service (Production)
  orders-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: swift-eats-orders-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-swift_eats_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-swift_eats}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_HOST: kafka:29092
      SERVICE_NAME: orders-service
      LOG_LEVEL: info
    ports:
      - "127.0.0.1:3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Restaurant Service (Production)
  restaurant-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: swift-eats-restaurant-prod
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://${POSTGRES_USER:-swift_eats_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-swift_eats}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      SERVICE_NAME: restaurant-service
      LOG_LEVEL: info
    ports:
      - "127.0.0.1:3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # GPS Service (Production)
  gps-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: swift-eats-gps-prod
    environment:
      NODE_ENV: production
      PORT: 3003
      KAFKA_HOST: kafka:29092
      SERVICE_NAME: gps-service
      SERVICE_INSTANCE_ID: gps-1
      LOG_LEVEL: info
    ports:
      - "127.0.0.1:3003:3003"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      replicas: 5
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Location Service (Production)
  location-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: swift-eats-location-prod
    environment:
      NODE_ENV: production
      PORT: 3004
      KAFKA_HOST: kafka:29092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      SERVICE_NAME: location-service
      LOG_LEVEL: info
    ports:
      - "127.0.0.1:3004:3004"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      replicas: 10
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first

  # Driver Assignment Service (Production)
  driver-assignment-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: swift-eats-driver-assignment-prod
    environment:
      NODE_ENV: production
      PORT: 3005
      KAFKA_HOST: kafka:29092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      DATABASE_URL: postgresql://${POSTGRES_USER:-swift_eats_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-swift_eats}
      SERVICE_NAME: driver-assignment-service
      LOG_LEVEL: info
    ports:
      - "127.0.0.1:3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      replicas: 5
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: swift-eats-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - orders-service
      - restaurant-service
      - gps-service
      - location-service
      - driver-assignment-service
    restart: unless-stopped
    networks:
      - swift-eats-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  swift-eats-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

